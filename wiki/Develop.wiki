#labels Phase-Implementation
=Table of Contents=
<wiki:toc />

=Introduction=
Thank you for your interest.
In this section it's explained how to become an active developer, helping us to improve the Rattlesnake Project.
If you need help contact the project manager at _mola89@gmail.com_ or other developers.
I suggest you to read some help manuals and guides. You can find them in the help section.

Remember that it is and it will always be *open source* and *free*.
=How to develop=
==Release schedule==
How is the typical release schedule?
A release of Rattlesnake is identified by:
`version.core_majrel.core_minrel.contrib_rel`
The following (pseudo)code explains the release version id concept:
{{{
def get_versionid()
  while core_minrel >= 10:
    core_majrel += 1
    core_minrel -= 10
  while core_majrel >= 10:
    version += 1
    core_majrel -= 10
  print "%s.%s.%s.%s" % (version,core_majrel,core_minrel,contrib_rel)
}}}

==The most important thing==
A project has to be well organized. You can develop your ideas without discuss it in the brainstorming page, but it's very very important that every ideas are discussed by a lot of developers, possibly in the brainstorming page.
The _brainstorming phase_ of the development of a feature is the most important, because a project organized well is that it has been analyzed in each of its parts.
So, the main features that are implemented are those discussed in the brainstorming page.
==Core and Contrib==
You can decide to develop the Core of the framework or the Contrib part. What's the difference? `*`

It's Simple:
  * *Core*
  What is the Core of Rattlesnake? It's like a kernel for a computer. What does it mean?
  The core it's the necessary part of the framework. If you want to use Rattlesnake, you have to use the Core. In the core there're the main features of the framework, like the _Jobs Scheduler_, the _Memory Management System_, the _Exception Handlers_, the _Input Manager_, the _Parameters Manager_, etc.. (For a complete list of the Core features, read the Reference).
  * *Contrib*
  What is the Contrib part of Rattlesnake? Why does it exist?
  The Contrib part of the framework can be called the <em>Extension part</em>. Everything that it isn't in the core it's an extension.
  An extension depends from the core and it should be independent from other extensions.
  So, I want to develop a new feature. Do I have to develop it in the Core or in Contrib?
  It depends. If it's a library that it's used by other libraries, it should be in the Core; if it isn't, it should be in Contrib. If it's something that it's used by users and not by other libraries it has to be in Contrib, if it isn't it has to be in the Core.
  Remember that contrib features have to be tested and so, if they're stable and usable, they're included in the Contrib part of the official framework.
==Core development==
A diagram could be more explanatory than a paragraph:

  * *Point (1)*:
  The major features ready to be developed are in the Feature Request tracker tagged as _Major_ (look at the tracking paragraph 3).
  A feature is ready when it's discussed and approved in the brainstorming page.
  After making code-changes you should post a comment in the Feature Request tracker; so the other developers are well syncronized, understanding what is already implemented and what needs to be revised.
  * *Point (2)*:
  The minor features ready to be developed are in the Feature Request tracker tagged as _Minor_. You mustn't post a comment in the Feature Request tracker, but it would be better.
==Contrib development==
As in the core development section, a diagram could be more explanatory than a paragraph:
  * *Point (1)*:
  There's more freedom about the Contrib development. The extensions can be developed by individual developers or by a group of them. It's recommended to be discussed in the brainstorming page.
==How to become operative==
There aren't any complex phases to become operative:
  * Read the _Official Guide_, the _Reference_ and choose what you want to develop.
  * Go to the Feature Tracking page for some informations about what to develop and contact any developer if you have any questions (if they aren't available please contact me at _mola89@gmail.com_).
=Tracking:=
==Issue Tracking System==
<ul>
	<li><a href="https://sourceforge.net/tracker/?func=add&amp;group_id=288846&amp;atid=1223244">Add</a> a new bug to the <acronym>BTS</acronym>.</li>
	<li><a href="https://sourceforge.net/tracker/?group_id=288846&amp;atid=1223244">Browse</a> all bugs tracked.</li>
</ul>
</li>
	<li>
<h3><abbr>Feature Fequests</abbr>:</h3>
<ul>
	<li><a href="https://sourceforge.net/tracker/?func=add&amp;group_id=288846&amp;atid=1223247">Add</a> a new <abbr>feature request</abbr>.</li>
	<li><a href="https://sourceforge.net/tracker/?group_id=288846&amp;atid=1223247">Browse</a> all <abbr>feature requests</abbr>.</li>
</ul>
</li>
	<li>
<h3><abbr>Patches</abbr>:</h3>
<ul>
	<li><a href="https://sourceforge.net/tracker/?func=add&amp;group_id=288846&amp;atid=1223246">Add</a> a new patch.</li>
	<li><a href="https://sourceforge.net/tracker/?group_id=288846&amp;atid=1223246">Browse</a> all patches.</li>
</ul>
</li>
	<li>
<h3><abbr>Support Requests</abbr>:</h3>
<ul>
	<li><a href="https://sourceforge.net/tracker/?func=add&amp;group_id=288846&amp;atid=1223245">Add</a> a new support request.</li>
	<li><a href="https://sourceforge.net/tracker/?group_id=288846&amp;atid=1223245">Browse</a> all support requests.</li>
</ul>
</li>
</ol>
<h2>4- Tools:</h2>
There are some useful tools that can help you to perform a better job.
<h3>4.1- <abbr>Subversion</abbr></h3>
When you develop you should use a subversion client (for example <a href="http://www.rapidsvn.org/index.php/Main_Page">RapidSVN</a>).
After making changes to the code you can upload it using the configured client.
<h4>Configuration of the subversion client</h4>
You have to checkout the <acronym>svn</acronym> repository.
It requires the following fields:
<ul>
	<li><strong>Svn repository:</strong> It's the following: <a href="https://rattlesnake.svn.sourceforge.net/svnroot/rattlesnake">https://rattlesnake.svn.sourceforge.net/svnroot/rattlesnake</a>.</li>
	<li><strong>Target directory</strong> The target directory has to be the project dir.</li>
</ul>
<h4>How to use the subversion client</h4>
There are 2 main use of the subversion client:
<ul>
	<li><strong>Commit:</strong> You upload the files in the repository, uploading the files in the <acronym>svn</acronym> repository.</li>
	<li><strong>Update:</strong> You download the files in the repository, downloading the files locally, replacing the files in your project directory</li>
</ul>
There are other important uses of SVN, you can check the details in the following guide (if you need to know them): <a href="http://svnbook.red-bean.com/nightly/en/svn-book.pdf">http://svnbook.red-bean.com/nightly/en/svn-book.pdf</a>
<h3>4.2- <abbr>Development Environment</abbr></h3>
First of all you need <a href="http://python.org/"><abbr>Python</abbr></a>.
You can use an editor, like:
<ul>
	<li><a href="http://kate-editor.org/"><abbr>Kate</abbr></a> (Linux)</li>
	<li><a href="http://notepad-plus.sourceforge.net/"><abbr>Notepad++</abbr></a> (Win)</li>
	<li><a href="http://www.jedit.org/"><abbr>jEdit</abbr></a> (Multiplatform)</li>
</ul>
Or you can use an <em><abbr>Integrated Development Environment</abbr>(<acronym>IDE</acronym>)</em>, like:
<ul>
	<li><a href="http://www.eclipse.org/"><abbr>Eclipse with PyDev</abbr></a> (Multiplatform). It is the recommended Development Environment</li>
	<li><a href="http://www.netbeans.org/"><abbr>Netbeans with Python plugin</abbr></a> (Multiplatform)</li>
</ul>
<h2>5- Guidelines</h2>
This project follows the <em>Zen of Python</em>:
<ul>
	<li>Beautiful is better than ugly.</li>
	<li>Explicit is better than implicit.</li>
	<li>Simple is better than complex.</li>
	<li>Complex is better than complicated.</li>
	<li>Flat is better than nested.</li>
	<li>Sparse is better than dense.</li>
	<li>Readability counts.</li>
	<li>Special cases aren't special enough to break the rules.</li>
	<li>Although practicality beats purity.</li>
	<li>Errors should never pass silently.</li>
	<li>Unless explicitly silenced.</li>
	<li>In the face of ambiguity, refuse the temptation to guess.</li>
	<li>There should be one-- and preferably only one --obvious way to do it.</li>
	<li>Although that way may not be obvious at first unless you're Dutch.</li>
	<li>Now is better than never.</li>
	<li>Although never is often better than *right* now.</li>
	<li>If the implementation is hard to explain, it's a bad idea.</li>
	<li>If the implementation is easy to explain, it may be a good idea.</li>
	<li>Namespaces are one honking great idea -- let's do more of those!</li>
</ul>